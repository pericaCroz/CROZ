1.
==
Potrebno je prekopirati datoteke iz direktorija webapp u proizvoljno imenovani
direktorij u web hijerarhiji Tomcat posluzitelja. Ako zelite da aplikacija bude
dostupna preko /app/, onda se i direktorij mora zvati app.
Preusmjeravanje httpa na https smatram da je duzan obaviti sam web server, dakle
trebalo bi konfigurirati Tomcatove connectore da rade redirect na https.

Nakon postavljanja aplikacije u webapps direktorij Tomcata s imenom app,
aplikacija ce biti dostupna na http(s)://localhost/app/hello.

Postoje 3 hardkodirana usera:
	user: Robert	password: Perica
	user: Marko	password: Markovic
	user: Pero	password: Peric

Robert ima ulogu admina i usera (pa moze vidjeti sav tekst), Marko ima samo
admin ulogu, pa ne vid korisnicki tekst, a Pero ima samo user ulogu, pa ne
vidi administratorov tekst.


NOTE:
=====
U direktoriju Jarovi se nalaze .jar datoteke za pojedini zadatak, sa
svim dependecyjima, i preporuca ih se pokretati iz tih direktorija.
Nisam bio konzistentan, pa su negdje u bin direktoriju, a negdje odmah
u top-level direktoriju. Takodjer, maven nije bio koristen.


2.
==
Ako se program pokrene bez ikakvih parametara, dobit ce se ispis svih opcija:
$ java -jar helloclient.jar 
Usage: 
helloclient -user <username> -pass <password> [-info] [-verifyCert]

Ako se koristi opcija -verifyCert, obzirom da je certifikat self-signed,
aplikacija ce baciti jako veliki stack trace nakon exceptiona. Opcija -info
prikazuje par detalja o certifikatu koji izdaje stranica na koju se spaja
(interno je hardkodirana na https://localhost/app/hello - ovo je mozda malo
ruzno napravljeno, ali radi)

Primjeri poziva iz uputa o zadacima rade kako trebaju.


3.
==
Ovaj programcic imitira SSH tunel. Koristenje je vrlo jednostavno. No, opcija
-f (pokretanje ssh u pozadini) nije podrzana, jer smatram da je to
funkcionalnost ljuske a ne programa (primjerice, u Linuxu operator &).
I parametri se ne zadaju kao lport:rhost:rport, vec odvojeno, sa zasebnim
flagovima.

$ java -jar sshtunnel.jar Usage:
sshtunnel <user@host> -lport <localport> -rhost <remotehost> -rport <remoteport>


4.
==
Kao sto pise u zadatku, ovaj programcic podrzava nekoliko hashing funkcija.
Nije mnogo, no da demonstrira svrhu. Ukoliko bi bilo potrebno implementirati
i druge funkcioalnosti (poput kriptiranja (a)simetricnim algoritmima), onda
bih bio koristio paket BouncyCastle, no ovako sam se oslonio na MessageDigest.

$ java -jar cryptohash.jar 
Usage:
cryptohash -hash <name> -calc -file <filename>
cryptohash -hash <name> -verify -file <filename> -checksum <filename>
Supported hashing algorithms: SHA-1, SHA-256, SHA-512


5.
==
$ java -jar digisign.jar 
Usage:
digisign -keystore <keystore> -sign -file <file>
digisign -keystore <keystore> -verify -file <file> -signature <signature>

Opet, program se poziva vrlo slicno kako je zadano tekstom zadatka. Jedina
razlika je sto sam truststore/keystore nazvao istim parametrom. Potreban je
jks (Java KeyStore) format, i prilozena je datoteka signer.jks kraj jar datoteke
(sifra keysorea je 'signer', nije htjelo raditi bez passworda).
U toj datoteci se nalaze certifikati signera i verifiera, kao i njihovi privatni
kljucevi (iako bi u stvarnoj situaciji signer imao svoj privatni kljuc, i mozda
verifierov certifikat buduci da je javan, a verifier ima svoj privatni kljuc i
signerov javni certifikat). Bitno je samo paziti na aliase:
	Kad se pita za certifikat:
		1 - signerov
		2 - verifierov
	Kad se pita za privatni kljuc:
		1 - signerov
		2 - verifierov
U konacnici se digitalni potpis kodira u base64 i stavlja u datoteku
<ime>.signature


6.
==
Ovaj zadatak opet nije rijesen, naime poceo sam, nasao paket imena XAdES4j
(pretpostavljam da i vi to koristite sudeci po oznakama u .xml fajlu (<ds...>)).
No, nemam dovoljno iskustva s postavljanjem svih silnih providera koji njegovi
konstruktori za signera traze, pokusao sam kopirati njegove klase iz primjera,
pokrenuti nad PKCS12 keystoreom (nesto mi se cini da ne radi s jks kad se
potpisuje, ali nisam nesto preduboko kopao), no program baca Exception. Princip
digitalnog potpisa mi je jasan, no ovaj framework nisam dovoljno proucio da bih
mogao nesto napraviti s njim. Sto se kanonikalizacije tice, dodao sam mu
constraint na objekt koji bi trebao potpisati, no uslijed exceptiona koji se 
baci neposredno prije, ne znam radi li to ista pametno, ili treba i to 
implementirati. Moj pokusaj implementacije obuhvaca samo potpisivanje, no kazem,
obzirom da ne radi, nije od velike koristi.
